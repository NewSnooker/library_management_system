// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  username          String?
  email             String? @unique
  password          String
  emailVerified     Boolean @default(false)
  verificationToken String?

  role        UserRole     @default(USER)
  userProfile UserProfile?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model UserProfile {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  username       String
  emailAddress   String
  prefix         String?
  fullName       String?
  codeNumber     String?
  phoneNumber    String?
  educationLevel String?
  educationYear  String?
  description    String?
  profileImage   String?

  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  activities      Activity[]
  favoriteBooks   FavoriteBook[]
  borrowings      Borrowing[]    @relation("borrower")
  approvals       Borrowing[]    @relation("approver")
  returnApprovals Borrowing[]    @relation("returnApprover")
  fineApprover    Borrowing[]    @relation("fineApprover")

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model FavoriteBook {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  bookId String @db.ObjectId

  book Book        @relation(fields: [bookId], references: [id])
  user UserProfile @relation(fields: [userId], references: [userId])

  createdAt DateTime @default(now())
}

enum ActivityType {
  CREATE_BOOK
  UPDATE_BOOK
  CREATE_CATEGORY
  UPDATE_CATEGORY
  CREATE_BANNER
  UPDATE_BANNER
  APPROVE_BORROW_REQUEST
  RETURN_APPROVALS
  FINE_APPROVALS
  CREATE_FINE_RATE
  UPDATE_FINE_RATE
}

model Activity {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  type          ActivityType
  userProfileId String       @db.ObjectId
  userProfile   UserProfile  @relation(fields: [userProfileId], references: [userId])
  bookId        String?      @db.ObjectId
  book          Book?        @relation(fields: [bookId], references: [id])
  categoryId    String?      @db.ObjectId
  category      Category?    @relation(fields: [categoryId], references: [id])
  bannerId      String?      @db.ObjectId
  banner        Banner?      @relation(fields: [bannerId], references: [id])
  borrowingId   String?      @db.ObjectId
  borrowing     Borrowing?   @relation(fields: [borrowingId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Category {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String  @unique
  imageUrl    String?
  description String?
  creatorId   String? @db.ObjectId

  book       Book[]
  activities Activity[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Book {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String   @unique
  price       Int
  quantity    Int
  remaining   Int
  author      String
  active      Boolean  @default(true)
  imageUrl    String?
  imageUrls   String[]
  description String?

  activities Activity[]
  favoriteBy FavoriteBook[]
  borrowings Borrowing[]

  categoryId String   @db.ObjectId
  category   Category @relation(fields: [categoryId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Banner {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  imageUrls  String[]
  activities Activity[]
}

enum BorrowingStatus {
  BORROWED
  RETURNED
  OVERDUE
  FINE_PAID
}
// BORROWED: กำลังยืม
// RETURNED: ส่งคืนแล้ว
// OVERDUE: เกินกำหนดส่ง
// FINE_PAID: จ่ายค่าปรับแล้ว

model Borrowing {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  bookId           String       @db.ObjectId
  book             Book         @relation(fields: [bookId], references: [id])
  borrowerId       String       @db.ObjectId
  borrower         UserProfile  @relation("borrower", fields: [borrowerId], references: [userId])
  approverId       String       @db.ObjectId
  approver         UserProfile  @relation("approver", fields: [approverId], references: [userId])
  returnApproverId String?      @db.ObjectId
  returnApprover   UserProfile? @relation("returnApprover", fields: [returnApproverId], references: [userId])
  fineApproverId   String?      @db.ObjectId
  fineApprover     UserProfile? @relation("fineApprover", fields: [fineApproverId], references: [userId])

  borrowDate DateTime        @default(now())
  dueDate    DateTime
  returnDate DateTime?
  isReturned Boolean         @default(false)
  fine       Float           @default(0)
  status     BorrowingStatus @default(BORROWED)
  activities Activity[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model FineRate {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  rate Float

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}
