// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  username          String?
  email             String? @unique
  password          String
  emailVerified     Boolean @default(false)
  verificationToken String?

  role        UserRole     @default(USER)
  userProfile UserProfile?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model UserProfile {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  username        String
  emailAddress    String
  prefix          String?
  fullName        String?
  codeNumber      String?
  phoneNumber     String?
  educationLevel  String?
  educationYear   String?
  description     String?
  profileImage    String?
  updaterBook     Book[]     @relation(name: "updaterBook")
  creatorBook     Book[]     @relation(name: "creatorBook")
  creatorCategory Category[] @relation(name: "creatorCategory")
  updaterCategory Category[] @relation(name: "updaterCategory")

  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Category {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String  @unique
  imageUrl    String?
  description String?

  book      Book[]
  creatorId String?      @db.ObjectId
  updaterId String?      @db.ObjectId
  creator   UserProfile? @relation(name: "creatorCategory", fields: [creatorId], references: [userId])
  updater   UserProfile? @relation(name: "updaterCategory", fields: [updaterId], references: [userId])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

enum BookStatus {
  AVAILABLE // หนังสือพร้อมให้ยืม
  BORROWED // หนังสือถูกยืมไปแล้ว
  OVERDUE // หนังสือค้างคืนเกินกำหนด
  LOST // หนังสือสูญหาย
  DAMAGED // หนังสือชำรุดเสียหาย
  NOT_AVAILABLE // หนังสือไม่พร้อมให้ยืม
}

model Book {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String     @unique
  price       Int
  quantity    Int
  remaining    Int
  author      String
  status      BookStatus @default(NOT_AVAILABLE)
  imageUrl    String?
  imageUrls   String[]
  description String?

  updaterId  String?      @db.ObjectId
  categoryId String       @db.ObjectId
  creatorId  String?      @db.ObjectId
  creator    UserProfile? @relation(name: "creatorBook", fields: [creatorId], references: [userId])
  updater    UserProfile? @relation(name: "updaterBook", fields: [updaterId], references: [userId])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  category  Category  @relation(fields: [categoryId], references: [id])
}
