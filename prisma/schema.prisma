// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  username          String?
  email             String? @unique
  password          String
  emailVerified     Boolean @default(false)
  verificationToken String?

  role        UserRole     @default(USER)
  userProfile UserProfile?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model UserProfile {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  username       String
  emailAddress   String
  prefix         String?
  fullName       String?
  codeNumber     String?
  phoneNumber    String?
  educationLevel String?
  educationYear  String?
  description    String?
  profileImage   String?

  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Category {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String  @unique
  imageUrl    String?
  description String?

  book Book[] // 1 to Many  Category => Product

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

enum BookStatus {
  AVAILABLE      // หนังสือพร้อมให้ยืม
  BORROWED       // หนังสือถูกยืมไปแล้ว
  OVERDUE        // หนังสือค้างคืนเกินกำหนด
  LOST           // หนังสือสูญหาย
  DAMAGED        // หนังสือชำรุดเสียหาย
  NOT_AVAILABLE   // หนังสือไม่พร้อมให้ยืม
}

model Book {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String       @unique
  author      String
  status      BookStatus   @default(NOT_AVAILABLE)
  imageUrl    String?
  imagesUrl   ImageItems[]
  description String?
  categoryId  String       @db.ObjectId 
  category    Category?    @relation(fields: [categoryId], references: [id]) 

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model ImageItems {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  key String?
  url String?

  bookId String? @db.ObjectId
  book   Book?   @relation(fields: [bookId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}
